require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ContactsController, :type => :controller do

  include_context 'contact_setup'
  include_context 'manufacturer_setup'
  include_context 'user_setup'

# CREATE A LIST OF MANUFACTURERS -------------------------------------------

  let(:find_a_manufacturer) {
    create_manufacturers_with_contact
    @manufacturer = Manufacturer.last
  }


  # CREATE PARAMETERS -------------------------------------------

  let(:create_params) {
    {
      manufacturer_id: @manufacturer.id,
      contact:
        {
         name: "John Miles",
         email: "johnmiles@testing.com",
         phone: "123-456-7890",
         body: "None",
        }
     }
    }

# UPDATE PARAMETERS -------------------------------------------

  let(:update_params) {
    {
      manufacturer_id: @manufacturer.id,
      id: @manufacturer.contacts.last.id,
      contact:
        {
         name: "John Miles",
         email: "johnmiles@testing.com",
         phone: "123-456-7890",
         body: "None",
        }
     }
    }

# DELETE PARAMETERS -------------------------------------------

  let(:delete_params) {
    {
      manufacturer_id: @manufacturer.id,
      id: @manufacturer.contacts.last.id,
    }
  }

  # NONEXISTENT CONTACT PARAMETERS -------------------------------------------

  let(:nonexistent_contact_params) {
    {
      manufacturer_id: @manufacturer.id,
      id: "54cfc6d87567652ca5000000",
    }
  }
# LOGIN AS ADMIN -------------------------------------------

  let(:login_contact_admin) {
   @contact_admin_user = FactoryGirl.create(:adminuser)
   sign_in @contact_admin_user
  }

# LOGIN AS NON-ADMIN -------------------------------------------

  let(:login_non_contact_admin) {
   @non_contact_admin_user = FactoryGirl.create(:user)
   sign_in @non_contact_admin_user
  }

# LOG BACK IN AS ADMIN -------------------------------------------

  let(:log_back_in_contact_admin) {
   sign_out subject.current_user
   sign_in @contact_admin_user
  }

    # ADMIN TESTS -------------------------------------------

describe "GET for Admin Users", :vcr do

    # SETUP FOR EACH ADMIN TEST -------------------------------------------

    before(:each) {
     find_a_manufacturer
     login_contact_admin
    }

    after(:each) {
     Manufacturer.destroy_all
    }

  describe "POST create", :vcr do

    describe "with valid params" do
      it "creates a new Contact" do
        post :create, create_params
        expect(response).to redirect_to ("http://test.host/manufacturers/#{assigns(:manufacturer).id}")
        flash[:notice].should eq("Contact was successfully created.")
      end
    end
  end

  describe "PUT update", :vcr do

    describe "with valid params" do
      it "update a Contact" do
        put :update, update_params
        expect(response).to redirect_to ("http://test.host/manufacturers/#{assigns(:manufacturer).id}")
        flash[:notice].should eq("Contact was successfully updated.")
      end
    end

    describe "with invalid params" do
      it "Redirect to admin_oops_url - update a Contact that cannot be found" do
        put :update, nonexistent_contact_params
        expect(response).to redirect_to admin_oops_url
      end
    end
  end

  describe "DELETE Destroy", :vcr do

    describe "with valid params" do
      it "delete a Contact" do
        delete :destroy, delete_params
        expect(response).to redirect_to ("http://test.host/manufacturers/#{assigns(:manufacturer).id}")
        flash[:notice].should eq("Contact was successfully deleted.")
      end
    end

    describe "with invalid params" do
      it "Redirect to admin_oops_url - delete a Contact that cannot be found" do
        delete :destroy, nonexistent_contact_params
        expect(response).to redirect_to admin_oops_url
      end
    end
  end
 end

 describe "GET for Admin Users", :vcr do

    # SETUP FOR EACH NON-ADMIN TEST -------------------------------------------

    before(:each) {
     find_a_manufacturer
     login_non_contact_admin
    }

    after(:each) {
     Manufacturer.destroy_all
    }

  describe "POST create", :vcr do

    describe "with valid params" do
      it "Redirect to admin_oops_url - creates a new Contact fails for non-admin user" do
        post :create, create_params
        expect(response).to redirect_to admin_oops_url
      end
    end
   end

  describe "PUT update", :vcr do

   describe "with valid params" do
      it "Redirect to admin_oops_url - update a Contact fails for non-admin user" do
        put :update, update_params
        expect(response).to redirect_to admin_oops_url
      end
   end
  end

  describe "DELETE Destroy", :vcr do

   describe "with valid params" do
      it "Redirect to admin_oops_url - delete a Contact fails for non-admin user" do
        delete :destroy, delete_params
        expect(response).to redirect_to admin_oops_url
      end
    end
  end
 end
end
